#!/usr/bin/env ruby -w
# -*- coding: utf-8 -*-
# :markup: markdown

# The `countlines` utility displays the number of lines contained in
# all files those have specified type in the target directory.  When
# no directory is specified, the current directory is used as target.
#
# Type must be specified with an extension string for a file, such as
# `rb` for a ruby program file, `md` for a text in the markdown
# format, and so on.

require 'slop'
require "kodougu"

class App
  VERSION = '0.1.3'

  def name
    File.basename($PROGRAM_NAME)
  end

  def banner
    "Usage: #{name} [options] type ..."
  end

  def version
    "#{name} version #{VERSION} (kodougu #{Kodougu::VERSION})"
  end

  attr_reader :opts

  def initialize(args)
    @opts = Slop.parse(args, banner: banner) do |o|
      o.string '-d', '--directory', 'specify the target directory'
      o.bool '-v', '--verbose', 'show count value for each file'
      o.on '-V', '--version', 'print version' do
        puts version
        exit
      end
      o.on '-h', '--help', 'show help' do
        puts o
        exit
      end
    end
  end

  def execute
    types = @opts.arguments
    if types.empty?
      $stderr.puts 'No type is specified.'
      exit 1
    end

    target_dir = File.expand_path(@opts[:directory] || '.')
    unless FileTest.directory?(target_dir)
      $stderr.puts "No such directory: #{target_dir}"
      exit 1
    end

    puts target_dir

    total_lines = 0
    types.each do |type|
      find_all_files(target_dir, type).each do |name|
        pathname = File.expand_path(name, target_dir)
        lines = count_lines(pathname)
        total_lines += lines
        puts "[%4d] #{name}" % lines if @opts.verbose?
      end
    end

    puts "Total: #{total_lines} lines"
  end

  private
  def find_all_files(top_path, type)
    Dir.chdir(top_path) { |p| Dir.glob("**/*.#{type}") }
  end

  def count_lines(filepath)
    File.readlines(filepath).size
  end
end

app = App.new(ARGV)
app.execute

